#!/usr/bin/env python
#

# import python libraries
import joblib
import os

# import project specific libraries
import nedc_mladp_fileio_tools as fileio_tools
import nedc_mladp_eval_tools as eval_tools
import nedc_mladp_feats_tools as feats_tools
import nedc_mladp_ann_tools as ann_tools

# import NEDC libraries
import nedc_file_tools
import nedc_dpath_ann_tools

def gen_preds(feature_files:dict=None,model=None):

    # set argument parsing
    #
    args_usage = "nedc_mladp_gen_preds.usage"
    args_help = "nedc_mladp_gen_preds.help"
    parameter_file = fileio_tools.parseArguments(args_usage,args_help)

    parsed_parameters = nedc_file_tools.load_parameters(parameter_file,"gen_preds")
    
    run_parameters = nedc_file_tools.load_parameters(parameter_file,"run")
    feature_files_list  = None
    model_file = None
    if int(run_parameters['run']) == 1:
        output_directory = run_parameters['output_directory']
        if not (output_directory.endswith("/")):
            output_directory += "/"
        output_directory += "predictions/"
    else:
        output_directory = parsed_parameters['output_directory']
        if not (output_directory.endswith("/")):
            output_directory += "/"
        feature_files_list = parsed_parameters['feature_files_list']
        model_file = parsed_parameters['model_file']
        
    regions_output_directory = []
    frames_output_directory = []
    os.makedirs(regions_output_directory,exist_ok=True)
    os.makedirs(frames_output_directory,exist_ok=True)

    if model_file is None:
        model = joblib.load(model_file)


    if feature_files_list != None:
        with open(feature_files_list,'r') as f:
            feature_files = f.readlines()
        
        for file in feature_files:
            with open(file.strip(),'r') as f:
                lines = [line.strip().split(',') for line in f.readlines() if ":" not in line]
                dataframe = pandas.DataFrame(lines[1:],columns=lines[0])
                append_dictionary = { 'Labels':dataframe['Label'].tolist(),
                                      'Top Left Coordinates':dataframe['TopLeftX','TopLeftY']
                                     }
                dataframe = dataframe.drop(['Label','TopLeftX','TopLeftY'])

                print(append_dictionary)
                print(dataframe)
                
        

    # iterate through each file
    #
    for data,current_file,header in zip(files_data,features_files_list,headers):

        # extract the data, labels, frame locations, and sizes
        #
        features = data[:, 4::]
        labels = data[:,0].tolist()
        frame_locations = data[:,1:3].tolist()
        frame_sizes=data[:,3]
            
        # generates a list of guess and their top level coordinates only applies to single image
        #
        file_frame_decisions_path = output_frame_decisions_directory+current_file.split('/')[-1][:-11]+"FRAME_DECISIONS.csv"

        # get the frame decisions
        #
        frame_decisions = eval_tools.generate_frame_decisions(model,features,file_frame_decisions_path,frame_locations,frame_sizes,header)

        # get the sparse matrixes
        #
        sparse_matrixes = ann_tools.coords_to_dict(frame_decisions)

        # generate a tuple of framesizes
        #
        framesize_fib = (int(frame_sizes[0]),int(frame_sizes[0]))

        # generate a heatmap of labels
        #
        heatmap = ann_tools.heatmap(sparse_matrixes,framesize_fib)
        
        # generate the regions
        #
        regions = eval_tools.generateRegionDecisions(heatmap,framesize_fib[0])

        # generate the header
        #
        ann_dpath_header = eval_tools.generateAnnotationsHeader(header)

        if write_region_decisions == 1:
            file_region_decisions_path = output_region_decisions_directory+current_file.split('/')[-1][:-11]+"REGION_DECISIONS.csv"
            annotation_writer = nedc_dpath_ann_tools.AnnDpath()
            annotation_writer.set_type("csv")
            annotation_writer.set_header(ann_dpath_header)
            annotation_writer.set_graph(regions)
            annotation_writer.write(file_region_decisions_path)
        
if __name__ == "__main__":
    gen_preds()
